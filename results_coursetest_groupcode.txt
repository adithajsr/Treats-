npm verb cli [
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/node',
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/npm',
npm verb cli   'run',
npm verb cli   'test',
npm verb cli   '--verbose',
npm verb cli   'tests/'
npm verb cli ]
npm info using npm@8.5.0
npm info using node@v16.14.2
npm timing npm:load:whichnode Completed in 1ms
npm timing config:load:defaults Completed in 2ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/lib/node_modules/npm/npmrc Completed in 1ms
npm timing config:load:builtin Completed in 1ms
npm timing config:load:cli Completed in 3ms
npm timing config:load:env Completed in 0ms
npm timing config:load:file:/import/kamen/3/cs1531/project-automarking/tempstore/.npmrc Completed in 0ms
npm timing config:load:project Completed in 12ms
npm timing config:load:file:/import/kamen/3/cs1531/.npmrc Completed in 1ms
npm timing config:load:user Completed in 1ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/etc/npmrc Completed in 0ms
npm timing config:load:global Completed in 0ms
npm timing config:load:validate Completed in 0ms
npm timing config:load:credentials Completed in 2ms
npm timing config:load:setEnvs Completed in 1ms
npm timing config:load Completed in 22ms
npm timing npm:load:configload Completed in 22ms
npm timing npm:load:setTitle Completed in 1ms
npm timing config:load:flatten Completed in 4ms
npm timing npm:load:display Completed in 7ms
npm verb logfile /import/kamen/3/cs1531/.npm/_logs/2022-06-25T00_32_14_631Z-debug-0.log
npm timing npm:load:logFile Completed in 8ms
npm timing npm:load:timers Completed in 0ms
npm timing npm:load:configScope Completed in 0ms
npm timing npm:load Completed in 39ms

> test
> jest "tests/"

FAIL tests/tests/user_tests/userProfile.test.js
  ● Test valid user profile

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "user": Object {
        "email": "blah@email.com",
    -     "handleStr": "johnsmith",
    +   "globalPerms": 1,
    +   "handle": "johnsmith",
        "nameFirst": "john",
        "nameLast": "smith",
    +   "password": "password1",
        "uId": 2,
    -   },
      }

      16 |     let uID = authRegisterV1('blah@email.com', 'password1', 'john', 'smith');
      17 |     let res = userProfileV1(authID.authUserId, uID.authUserId);
    > 18 |     expect(res).toStrictEqual({user: {uId: uID.authUserId, email: 'blah@email.com', nameFirst: 'john', nameLast: 'smith', handleStr: 'johnsmith'}});
         |                 ^
      19 | });
      20 |
      21 | /*

      at Object.<anonymous> (tests/tests/user_tests/userProfile.test.js:18:17)

FAIL tests/tests/channel_tests/channelDetails.test.js
  ● Test handles generated correctly › Should behave correctly for duplicate names

    TypeError: (0 , _channel.channelJoinV1) is not a function

      36 |
      37 |             let uId1 = authRegisterV1(email1, 'Password123', first1, last1)['authUserId'];
    > 38 |             channelJoinV1(uId1, chIdWoody);
         |             ^
      39 |
      40 |             let uId2 = authRegisterV1(email2, 'Password123', first2, last2)['authUserId'];
      41 |             channelJoinV1(uId2, chIdWoody);

      at tests/tests/channel_tests/channelDetails.test.js:38:13

  ● Test handles generated correctly › Should behave correctly for duplicate names

    TypeError: (0 , _channel.channelJoinV1) is not a function

      36 |
      37 |             let uId1 = authRegisterV1(email1, 'Password123', first1, last1)['authUserId'];
    > 38 |             channelJoinV1(uId1, chIdWoody);
         |             ^
      39 |
      40 |             let uId2 = authRegisterV1(email2, 'Password123', first2, last2)['authUserId'];
      41 |             channelJoinV1(uId2, chIdWoody);

      at tests/tests/channel_tests/channelDetails.test.js:38:13

  ● Test handles generated correctly › Should behave correctly for duplicate names

    TypeError: (0 , _channel.channelJoinV1) is not a function

      36 |
      37 |             let uId1 = authRegisterV1(email1, 'Password123', first1, last1)['authUserId'];
    > 38 |             channelJoinV1(uId1, chIdWoody);
         |             ^
      39 |
      40 |             let uId2 = authRegisterV1(email2, 'Password123', first2, last2)['authUserId'];
      41 |             channelJoinV1(uId2, chIdWoody);

      at tests/tests/channel_tests/channelDetails.test.js:38:13

  ● Test handles generated correctly › Should behave correctly for duplicate names

    TypeError: (0 , _channel.channelJoinV1) is not a function

      36 |
      37 |             let uId1 = authRegisterV1(email1, 'Password123', first1, last1)['authUserId'];
    > 38 |             channelJoinV1(uId1, chIdWoody);
         |             ^
      39 |
      40 |             let uId2 = authRegisterV1(email2, 'Password123', first2, last2)['authUserId'];
      41 |             channelJoinV1(uId2, chIdWoody);

      at tests/tests/channel_tests/channelDetails.test.js:38:13

  ● Test details from non channel member

    TypeError: (0 , _channel.channelDetailsV1) is not a function

      52 |
      53 | test('Test details from non channel member', () => {
    > 54 |     let res = channelDetailsV1(uIdZerg, chIdWoody);
         |               ^
      55 |     expect(res).toStrictEqual({error: 'error'});
      56 | });
      57 |

      at Object.<anonymous> (tests/tests/channel_tests/channelDetails.test.js:54:15)

  ● Test channel id invalid

    TypeError: (0 , _channel.channelDetailsV1) is not a function

      57 |
      58 | test('Test channel id invalid', () => {
    > 59 |     let res = channelDetailsV1(uIdWoody, -1);
         |               ^
      60 |     expect(res).toStrictEqual({error: 'error'});
      61 | });
      62 |

      at Object.<anonymous> (tests/tests/channel_tests/channelDetails.test.js:59:15)

FAIL tests/tests/channels_tests/channelsList.test.js
  ● Test channel member in channel › Create channel then list details

    TypeError: (0 , _channel.channelInviteV1) is not a function

      35 |         (pub) => {
      36 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
    > 37 |             channelInviteV1(uId, chId, uIdWoody);
         |             ^
      38 |             let deets = {'channelId': chId, 'name': 'andy'};
      39 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
      40 |         }

      at tests/tests/channels_tests/channelsList.test.js:37:13

  ● Test channel member in channel › Create channel then list details

    TypeError: (0 , _channel.channelInviteV1) is not a function

      35 |         (pub) => {
      36 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
    > 37 |             channelInviteV1(uId, chId, uIdWoody);
         |             ^
      38 |             let deets = {'channelId': chId, 'name': 'andy'};
      39 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
      40 |         }

      at tests/tests/channels_tests/channelsList.test.js:37:13

  ● Test user in multiple channels › Create channel then list details

    TypeError: (0 , _channel.channelInviteV1) is not a function

      48 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
      49 |             let chId2 = channelsCreateV1(uId, 'ZERG', pub)['channelId'];
    > 50 |             channelInviteV1(uId, chId, uIdWoody);
         |             ^
      51 |             let expectedDeets = [{'channelId': chId, 'name': 'andy'}, {'channelId': chId2, 'name': 'ZERG'}];
      52 |             let deets = channelsListV1(uId)['channels'];
      53 |             deets.sort((a, b) => (a['channelId']- b['channelId']));

      at tests/tests/channels_tests/channelsList.test.js:50:13

  ● Test user in multiple channels › Create channel then list details

    TypeError: (0 , _channel.channelInviteV1) is not a function

      48 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
      49 |             let chId2 = channelsCreateV1(uId, 'ZERG', pub)['channelId'];
    > 50 |             channelInviteV1(uId, chId, uIdWoody);
         |             ^
      51 |             let expectedDeets = [{'channelId': chId, 'name': 'andy'}, {'channelId': chId2, 'name': 'ZERG'}];
      52 |             let deets = channelsListV1(uId)['channels'];
      53 |             deets.sort((a, b) => (a['channelId']- b['channelId']));

      at tests/tests/channels_tests/channelsList.test.js:50:13

FAIL tests/tests/channel_tests/channelInvite.test.js
  ● Test error when already a member

    TypeError: (0 , _channel.channelInviteV1) is not a function

      21 |
      22 | test('Test error when already a member', () => {
    > 23 |     channelInviteV1(uIdWoody, chIdWoody, uIdBuzz);
         |     ^
      24 |     let res = channelInviteV1(uIdWoody, chIdWoody, uIdBuzz);
      25 |     expect(res).toStrictEqual({error: 'error'});
      26 | });

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:23:5)

  ● Test inviting global owner 1

    TypeError: (0 , _channel.channelInviteV1) is not a function

      27 |
      28 | test('Test inviting global owner 1', () => {
    > 29 |     channelInviteV1(uIdWoody, chIdWoody, uIdBuzz);
         |     ^
      30 |     // woody should be a member, not an owner
      31 |     let channelDetail = channelDetailsV1(uIdBuzz, chIdWoody);
      32 |     // buzz should be in all members, not owners

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:29:5)

  ● Test inviting global owner 2

    TypeError: (0 , _channel.channelInviteV1) is not a function

      38 |
      39 | test('Test inviting global owner 2', () => {
    > 40 |     channelInviteV1(uIdZerg, chIdZerg, uIdWoody);
         |     ^
      41 |     // woody should be a member, not an owner
      42 |     let channelDetail = channelDetailsV1(uIdWoody, chIdZerg);
      43 |     // buzz should be in all members, not owners

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:40:5)

  ● Test invite from non channel member

    TypeError: (0 , _channel.channelInviteV1) is not a function

      49 |
      50 | test('Test invite from non channel member', () => {
    > 51 |     let res = channelInviteV1(uIdWoody, chIdZerg, uIdBuzz);
         |               ^
      52 |     expect(res).toStrictEqual({error: 'error'});
      53 | });
      54 |

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:51:15)

  ● Test channel id invalid

    TypeError: (0 , _channel.channelInviteV1) is not a function

      54 |
      55 | test('Test channel id invalid', () => {
    > 56 |     let res = channelInviteV1(uIdWoody, -1, uIdBuzz);
         |               ^
      57 |     expect(res).toStrictEqual({error: 'error'});
      58 | });
      59 |

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:56:15)

FAIL tests/tests/channel_tests/channelMessages.test.js
  ● Test successful no messages

    TypeError: (0 , _channel.channelMessagesV1) is not a function

      21 |
      22 | test('Test successful no messages', () => {
    > 23 |     let res = channelMessagesV1(uIdWoody, chIdWoody, 0);
         |               ^
      24 |     expect(res['start']).toBe(0);
      25 |     expect(res['end']).toBe(-1);
      26 |     expect(res['messages']).toStrictEqual([]);

      at Object.<anonymous> (tests/tests/channel_tests/channelMessages.test.js:23:15)

  ● Test error when start greater than message num

    TypeError: (0 , _channel.channelMessagesV1) is not a function

      28 |
      29 | test('Test error when start greater than message num', () => {
    > 30 |     let res = channelMessagesV1(uIdWoody, chIdWoody, 21389429);
         |               ^
      31 |     expect(res).toStrictEqual({error: 'error'});
      32 | });
      33 |

      at Object.<anonymous> (tests/tests/channel_tests/channelMessages.test.js:30:15)

  ● Test messages from non channel member

    TypeError: (0 , _channel.channelMessagesV1) is not a function

      33 |
      34 | test('Test messages from non channel member', () => {
    > 35 |     let res = channelMessagesV1(uIdZerg, chIdWoody, 0);
         |               ^
      36 |     expect(res).toStrictEqual({error: 'error'});
      37 | });
      38 |

      at Object.<anonymous> (tests/tests/channel_tests/channelMessages.test.js:35:15)

  ● Test channel id invalid

    TypeError: (0 , _channel.channelMessagesV1) is not a function

      38 |
      39 | test('Test channel id invalid', () => {
    > 40 |     let res = channelMessagesV1(uIdWoody, -1, 0);
         |               ^
      41 |     expect(res).toStrictEqual({error: 'error'});
      42 | });
      43 |

      at Object.<anonymous> (tests/tests/channel_tests/channelMessages.test.js:40:15)

FAIL tests/tests/channel_tests/channelJoin.test.js
  ● Test global owner can join private channel

    TypeError: (0 , _channel.channelJoinV1) is not a function

      20 |
      21 | test('Test global owner can join private channel', () => {
    > 22 |     channelJoinV1(uIdWoody, chIdZerg);
         |     ^
      23 |     let chDeets = channelDetailsV1(uIdWoody, chIdZerg);
      24 |     let owners = chDeets['ownerMembers'].map(mem => mem['uId']);
      25 |     let allmems = chDeets['allMembers'].map(mem => mem['uId']);

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:22:5)

  ● Test global owner can join public channel

    TypeError: (0 , _channel.channelJoinV1) is not a function

      29 |
      30 | test('Test global owner can join public channel', () => {
    > 31 |     channelJoinV1(uIdBuzz, chIdWoody);
         |     ^
      32 |     let chDeets = channelDetailsV1(uIdBuzz, chIdWoody);
      33 |     let owners = chDeets['ownerMembers'].map(mem => mem['uId']);
      34 |     let allmems = chDeets['allMembers'].map(mem => mem['uId']);

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:31:5)

  ● Test global member cant join private channel

    TypeError: (0 , _channel.channelJoinV1) is not a function

      38 |
      39 | test('Test global member cant join private channel', () => {
    > 40 |     let res = channelJoinV1(uIdBuzz, chIdZerg);
         |               ^
      41 |     expect(res).toStrictEqual({error: 'error'});
      42 | });
      43 |

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:40:15)

  ● Test already joined channel

    TypeError: (0 , _channel.channelJoinV1) is not a function

      43 |
      44 | test('Test already joined channel', () => {
    > 45 |     let res = channelJoinV1(uIdWoody, chIdWoody);
         |               ^
      46 |     expect(res).toStrictEqual({error: 'error'});
      47 | });
      48 |

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:45:15)

  ● Test channel id invalid

    TypeError: (0 , _channel.channelJoinV1) is not a function

      48 |
      49 | test('Test channel id invalid', () => {
    > 50 |     let res = channelJoinV1(uIdWoody, -1);
         |               ^
      51 |     expect(res).toStrictEqual({error: 'error'});
      52 | });
      53 |

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:50:15)

FAIL tests/tests/channels_tests/channelsCreate.test.js
  ● Test create channel successful › Created channel info in channel details

    TypeError: (0 , _channel.channelDetailsV1) is not a function

      19 |         (channelName) => {
      20 |             let chId = channelsCreateV1(uId, channelName, true)['channelId'];
    > 21 |             let deets = channelDetailsV1(uId, chId);
         |                         ^
      22 |             expect(deets['name']).toBe(channelName);
      23 |             // check in owner and all members lists
      24 |             let owners = deets['ownerMembers'].map(mem => mem['uId']);

      at tests/tests/channels_tests/channelsCreate.test.js:21:25

  ● Test create channel successful › Created channel info in channel details

    TypeError: (0 , _channel.channelDetailsV1) is not a function

      19 |         (channelName) => {
      20 |             let chId = channelsCreateV1(uId, channelName, true)['channelId'];
    > 21 |             let deets = channelDetailsV1(uId, chId);
         |                         ^
      22 |             expect(deets['name']).toBe(channelName);
      23 |             // check in owner and all members lists
      24 |             let owners = deets['ownerMembers'].map(mem => mem['uId']);

      at tests/tests/channels_tests/channelsCreate.test.js:21:25

PASS tests/tests/auth_tests/authRegister.test.js
PASS tests/tests/other_tests/clear.test.js
PASS tests/tests/auth_tests/authLogin.test.js
FAIL tests/tests/channels_tests/channelsListall.test.js
  ● Test when one channel exists private

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": 2, "name": "zergs lair"}]
    Received: []

      28 |     let res = channelsListallV1(uIdWoody)['channels'];
      29 |     let channelDetail = {'channelId': chIdZerg, 'name': 'zergs lair'}
    > 30 |     expect(res).toEqual(
         |                 ^
      31 |         expect.arrayContaining([
      32 |             expect.objectContaining(channelDetail)
      33 |         ])

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:30:17)

  ● Test when one channel exists public

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": 1, "name": "woodys toybox"}]
    Received: []

      38 |     let res = channelsListallV1(uIdZerg)['channels'];
      39 |     let channelDetail = {'channelId': chIdWoody, 'name': 'woodys toybox'}
    > 40 |     expect(res).toEqual(
         |                 ^
      41 |         expect.arrayContaining([
      42 |             expect.objectContaining(channelDetail)
      43 |         ])

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:40:17)

  ● Test when multiple channels exist

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 10
    + Received  +  1

    - Array [
    -   Object {
    -     "channelId": 1,
    -     "name": "woodys toybox",
    -   },
    -   Object {
    -     "channelId": 2,
    -     "name": "zergs lair",
    -   },
    - ]
    + Array []

      54 |     res.sort((a, b) => (a['channelId']- b['channelId']));
      55 |     expectedChannels.sort((a, b) => (a['channelId']- b['channelId']));
    > 56 |     expect(res).toStrictEqual(expectedChannels);
         |                 ^
      57 | });
      58 |
      59 | /*

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:56:17)

Test Suites: 8 failed, 3 passed, 11 total
Tests:       30 failed, 22 passed, 52 total
Snapshots:   0 total
Time:        2.2 s
Ran all test suites matching /tests\//i.
npm timing command:run Completed in 3506ms
npm verb exit 1
npm timing npm Completed in 3767ms
npm verb code 1
